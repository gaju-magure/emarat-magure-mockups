import { useState } from "react";
import { FileText, Briefcase, Filter, Search, Eye } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs";

interface TasksProps {
  onOpenApp: (app: string) => void;
}

export function Tasks({ onOpenApp }: TasksProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const [departmentFilter, setDepartmentFilter] = useState("all");

  const pendingTasks = [
    {
      id: 1,
      type: "Invoice",
      typeIcon: FileText,
      description: "PO #9987 - Amount mismatch",
      invoiceId: "#4527",
      confidence: 72,
      status: "Pending",
      department: "Finance",
      assignee: "You",
    },
    {
      id: 2,
      type: "RFP",
      typeIcon: Briefcase,
      description: "Vendor A shortlisted",
      invoiceId: "Fuel Supply Q1",
      confidence: 92,
      status: "In Progress",
      department: "Procurement",
      assignee: "You",
    },
    {
      id: 3,
      type: "Invoice",
      typeIcon: FileText,
      description: "PO #9988 - Price variance",
      invoiceId: "#4531",
      confidence: 68,
      status: "Pending",
      department: "Finance",
      assignee: "Sarah Ahmed",
    },
    {
      id: 4,
      type: "RFP",
      typeIcon: Briefcase,
      description: "Vendor B proposal review",
      invoiceId: "Fleet Maintenance",
      confidence: 78,
      status: "Pending",
      department: "Procurement",
      assignee: "You",
    },
    {
      id: 5,
      type: "Invoice",
      typeIcon: FileText,
      description: "Duplicate invoice detected",
      invoiceId: "#4535",
      confidence: 89,
      status: "Pending",
      department: "Finance",
      assignee: "Ahmed Ali",
    },
  ];

  const completedTasks = [
    {
      id: 6,
      type: "Invoice",
      typeIcon: FileText,
      description: "PO #9985 - Match approved",
      invoiceId: "#4520",
      confidence: 95,
      status: "Approved",
      department: "Finance",
      completedBy: "You",
      completedDate: "Oct 5, 2025",
    },
    {
      id: 7,
      type: "RFP",
      typeIcon: Briefcase,
      description: "Vendor C contract signed",
      invoiceId: "IT Infrastructure",
      confidence: 85,
      status: "Approved",
      department: "Procurement",
      completedBy: "John Smith",
      completedDate: "Oct 4, 2025",
    },
  ];

  const myTasks = pendingTasks.filter((task) => task.assignee === "You");

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 85) return "text-green-400 bg-green-500/20";
    if (confidence >= 70) return "text-yellow-400 bg-yellow-500/20";
    return "text-red-400 bg-red-500/20";
  };

  const departments = ["all", "Finance", "Procurement", "HR"];

  return (
    <div className="h-full overflow-y-auto p-3 md:p-6">
      <div className="mb-4 md:mb-6">
        <h1 className="text-white mb-2 text-xl md:text-2xl">Task Management</h1>
        <p className="text-gray-400 text-sm md:text-base">
          Central view for all pending tasks, human reviews, and approvals generated by AI processes.
        </p>
      </div>

      {/* Filters */}
      <div className="flex flex-col sm:flex-row items-stretch sm:items-center gap-2 md:gap-4 mb-4 md:mb-6">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
          <input
            type="text"
            placeholder="Search tasks..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="w-full pl-10 pr-4 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm md:text-base placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
          />
        </div>
        <div className="flex items-center gap-2 sm:w-auto w-full">
          <Filter className="w-4 h-4 text-gray-400" />
          <select
            value={departmentFilter}
            onChange={(e) => setDepartmentFilter(e.target.value)}
            className="flex-1 sm:flex-initial px-3 md:px-4 py-2 bg-white/5 border border-white/10 rounded-lg text-white text-sm md:text-base focus:outline-none focus:ring-2 focus:ring-blue-500/50"
          >
            {departments.map((dept) => (
              <option key={dept} value={dept} className="bg-[#08111e]">
                {dept === "all" ? "All Departments" : dept}
              </option>
            ))}
          </select>
        </div>
      </div>

      <Tabs defaultValue="pending" className="space-y-4 md:space-y-6">
        <TabsList className="bg-white/5 border border-white/10">
          <TabsTrigger value="pending">Pending Review ({pendingTasks.length})</TabsTrigger>
          <TabsTrigger value="completed">Completed ({completedTasks.length})</TabsTrigger>
          <TabsTrigger value="mine">Assigned to Me ({myTasks.length})</TabsTrigger>
        </TabsList>

        {/* Pending Review */}
        <TabsContent value="pending" className="space-y-4">
          {/* Mobile Card View */}
          <div className="md:hidden space-y-3">
            {pendingTasks.map((task) => (
              <div
                key={task.id}
                className="bg-white/[0.02] backdrop-blur-md border border-white/10 rounded-xl p-4"
              >
                <div className="flex items-start gap-3 mb-3">
                  <div className="w-10 h-10 bg-blue-500/20 rounded-lg flex items-center justify-center flex-shrink-0">
                    <task.typeIcon className="w-5 h-5 text-blue-400" />
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-white text-sm mb-1">{task.description}</p>
                    <p className="text-gray-500 text-xs">{task.invoiceId}</p>
                  </div>
                </div>
                <div className="flex items-center justify-between mb-3">
                  <span
                    className={`inline-block px-3 py-1 rounded text-sm ${getConfidenceColor(
                      task.confidence
                    )}`}
                  >
                    {task.confidence}%
                  </span>
                  <span className="text-xs text-gray-400">{task.department}</span>
                </div>
                <button
                  onClick={() => onOpenApp(task.type === "Invoice" ? "invoice" : "rfp")}
                  className="w-full px-3 py-2 bg-blue-500 hover:bg-blue-600 active:bg-blue-700 text-white rounded-lg transition-all flex items-center justify-center gap-2 text-sm"
                >
                  <Eye className="w-4 h-4" />
                  Review
                </button>
              </div>
            ))}
          </div>
          
          {/* Desktop Table View */}
          <div className="hidden md:block bg-white/[0.02] backdrop-blur-md border border-white/10 rounded-xl overflow-hidden">
            <table className="w-full">
              <thead className="bg-white/[0.03]">
                <tr>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Type</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Description</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">AI Confidence</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Department</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Status</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Action</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-white/5">
                {pendingTasks.map((task) => (
                  <tr key={task.id} className="hover:bg-white/[0.03] transition-colors">
                    <td className="px-4 py-4">
                      <div className="flex items-center gap-2">
                        <div className="w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center">
                          <task.typeIcon className="w-4 h-4 text-blue-400" />
                        </div>
                        <span className="text-white">{task.type}</span>
                      </div>
                    </td>
                    <td className="px-4 py-4">
                      <div>
                        <p className="text-white text-sm">{task.description}</p>
                        <p className="text-gray-500 text-xs">{task.invoiceId}</p>
                      </div>
                    </td>
                    <td className="px-4 py-4">
                      <span
                        className={`inline-block px-3 py-1 rounded text-sm ${getConfidenceColor(
                          task.confidence
                        )}`}
                      >
                        {task.confidence}%
                      </span>
                    </td>
                    <td className="px-4 py-4 text-gray-300">{task.department}</td>
                    <td className="px-4 py-4">
                      <span
                        className={`inline-block px-2 py-1 rounded text-xs ${
                          task.status === "Pending"
                            ? "bg-yellow-500/20 text-yellow-400"
                            : "bg-blue-500/20 text-blue-400"
                        }`}
                      >
                        {task.status}
                      </span>
                    </td>
                    <td className="px-4 py-4">
                      <button
                        onClick={() =>
                          onOpenApp(task.type === "Invoice" ? "invoice" : "rfp")
                        }
                        className="px-3 py-1.5 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-all flex items-center gap-2 text-sm"
                      >
                        <Eye className="w-4 h-4" />
                        Review
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </TabsContent>

        {/* Completed */}
        <TabsContent value="completed" className="space-y-4">
          {/* Mobile Card View */}
          <div className="md:hidden space-y-3">
            {completedTasks.map((task) => (
              <div
                key={task.id}
                className="bg-white/[0.02] backdrop-blur-md border border-white/10 rounded-xl p-4"
              >
                <div className="flex items-start gap-3 mb-3">
                  <div className="w-10 h-10 bg-green-500/20 rounded-lg flex items-center justify-center flex-shrink-0">
                    <task.typeIcon className="w-5 h-5 text-green-400" />
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-white text-sm mb-1">{task.description}</p>
                    <p className="text-gray-500 text-xs">{task.invoiceId}</p>
                  </div>
                </div>
                <div className="flex items-center justify-between text-xs">
                  <span className="text-gray-400">{task.completedBy}</span>
                  <span className="text-gray-500">{task.completedDate}</span>
                </div>
              </div>
            ))}
          </div>
          
          {/* Desktop Table View */}
          <div className="hidden md:block bg-white/[0.02] backdrop-blur-md border border-white/10 rounded-xl overflow-hidden">
            <table className="w-full">
              <thead className="bg-white/[0.03]">
                <tr>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Type</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Description</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Completed By</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Date</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Status</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-white/5">
                {completedTasks.map((task) => (
                  <tr key={task.id} className="hover:bg-white/[0.03] transition-colors">
                    <td className="px-4 py-4">
                      <div className="flex items-center gap-2">
                        <div className="w-8 h-8 bg-green-500/20 rounded-lg flex items-center justify-center">
                          <task.typeIcon className="w-4 h-4 text-green-400" />
                        </div>
                        <span className="text-white">{task.type}</span>
                      </div>
                    </td>
                    <td className="px-4 py-4">
                      <div>
                        <p className="text-white text-sm">{task.description}</p>
                        <p className="text-gray-500 text-xs">{task.invoiceId}</p>
                      </div>
                    </td>
                    <td className="px-4 py-4 text-gray-300">{task.completedBy}</td>
                    <td className="px-4 py-4 text-gray-400 text-sm">{task.completedDate}</td>
                    <td className="px-4 py-4">
                      <span className="inline-block px-2 py-1 rounded text-xs bg-green-500/20 text-green-400">
                        {task.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </TabsContent>

        {/* Assigned to Me */}
        <TabsContent value="mine" className="space-y-4">
          {/* Mobile Card View */}
          <div className="md:hidden space-y-3">
            {myTasks.map((task) => (
              <div
                key={task.id}
                className="bg-white/[0.02] backdrop-blur-md border border-white/10 rounded-xl p-4"
              >
                <div className="flex items-start gap-3 mb-3">
                  <div className="w-10 h-10 bg-blue-500/20 rounded-lg flex items-center justify-center flex-shrink-0">
                    <task.typeIcon className="w-5 h-5 text-blue-400" />
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-white text-sm mb-1">{task.description}</p>
                    <p className="text-gray-500 text-xs">{task.invoiceId}</p>
                  </div>
                </div>
                <div className="flex items-center justify-between mb-3">
                  <span
                    className={`inline-block px-3 py-1 rounded text-sm ${getConfidenceColor(
                      task.confidence
                    )}`}
                  >
                    {task.confidence}%
                  </span>
                  <span className="text-xs text-gray-400">{task.department}</span>
                </div>
                <button
                  onClick={() => onOpenApp(task.type === "Invoice" ? "invoice" : "rfp")}
                  className="w-full px-3 py-2 bg-blue-500 hover:bg-blue-600 active:bg-blue-700 text-white rounded-lg transition-all flex items-center justify-center gap-2 text-sm"
                >
                  <Eye className="w-4 h-4" />
                  Review
                </button>
              </div>
            ))}
          </div>
          
          {/* Desktop Table View */}
          <div className="hidden md:block bg-white/[0.02] backdrop-blur-md border border-white/10 rounded-xl overflow-hidden">
            <table className="w-full">
              <thead className="bg-white/[0.03]">
                <tr>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Type</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Description</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">AI Confidence</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Department</th>
                  <th className="px-4 py-3 text-left text-sm text-gray-400">Action</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-white/5">
                {myTasks.map((task) => (
                  <tr key={task.id} className="hover:bg-white/[0.03] transition-colors">
                    <td className="px-4 py-4">
                      <div className="flex items-center gap-2">
                        <div className="w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center">
                          <task.typeIcon className="w-4 h-4 text-blue-400" />
                        </div>
                        <span className="text-white">{task.type}</span>
                      </div>
                    </td>
                    <td className="px-4 py-4">
                      <div>
                        <p className="text-white text-sm">{task.description}</p>
                        <p className="text-gray-500 text-xs">{task.invoiceId}</p>
                      </div>
                    </td>
                    <td className="px-4 py-4">
                      <span
                        className={`inline-block px-3 py-1 rounded text-sm ${getConfidenceColor(
                          task.confidence
                        )}`}
                      >
                        {task.confidence}%
                      </span>
                    </td>
                    <td className="px-4 py-4 text-gray-300">{task.department}</td>
                    <td className="px-4 py-4">
                      <button
                        onClick={() =>
                          onOpenApp(task.type === "Invoice" ? "invoice" : "rfp")
                        }
                        className="px-3 py-1.5 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-all flex items-center gap-2 text-sm"
                      >
                        <Eye className="w-4 h-4" />
                        Review
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
}